//
// Generated for Cardess.SELL
// https://github.com/yonaskolb/SwagGen
//  
//  Generated by Ilya Mikhailov
//  Copyright Â© 2022 MCon Germany GmbH. All rights reserved.

import Foundation



public class MasterDataTaxonomyMotorizationInfo: Codable, Equatable {
  public var accel: Double?
  public var accel80To120kmh: Double?
  public var accel80To120kmhNGrinBoost: Double?
  public var accelNGrinBoost: Double?
  public var accelSport: Double?
  public var airDrag: Double?
  public var automaticStartStop: String?
  public var bafaActive: Bool?
  public var bafaManufacturerPrice: Double?
  public var bafaName: String?
  public var battery: String?
  public var batteryCapacity: Double?
  public var batteryChargingTime100kw10Percent: Double?
  public var batteryChargingTime10kw10Percent: Double?
  public var batteryChargingTime11kw10Percent: Double?
  public var batteryChargingTime11kw10To100Percent: Double?
  public var batteryChargingTime11kwObc0To100Percent: Double?
  public var batteryChargingTime11kwObc10Percent: Double?
  public var batteryChargingTime230v0Percent: Double?
  public var batteryChargingTime230v10Percent: Double?
  public var batteryChargingTime350kw10Percent: Double?
  public var batteryChargingTime4kw0Percent: Double?
  public var batteryChargingTime4kw10Percent: Double?
  public var batteryChargingTime50kw0Percent: Double?
  public var batteryChargingTime50kw10Percent: Double?
  public var batteryChargingTime70kw0Percent: Double?
  public var batteryChargingTime7kwObc10Percent: Double?
  public var batteryType: String?
  public var bearingLoad: Double?
  public var catalyst: String?
  public var clearanceVap: String?
  public var co2: Double?
  public var co2Wltp: Double?
  public var coldStartability: String?
  public var cylnum: Int?
  public var deliveryPeriod: Int?
  public var description: String?
  public var drive: String?
  public var ecoCategory: String?
  public var emissionCombinedEmptyBatteryWltp: Double?
  public var emissionCombinedWltp: Double?
  public var energyClass: String?
  public var envkvClassEmptyBatteryWltp: String?
  public var envkvClassWltp: String?
  public var fuelConsumptionCity: Double?
  public var fuelConsumptionCityWltp: Double?
  public var fuelConsumptionCityWltpElectro: Double?
  public var fuelConsumptionCombined: Double?
  public var fuelConsumptionCombinedElectricWltp: Double?
  public var fuelConsumptionCombinedElectro: Double?
  public var fuelConsumptionCombinedEmptyBatteryWltp: Double?
  public var fuelConsumptionCombinedHybridModeWltp: Double?
  public var fuelConsumptionCombinedWltp: Double?
  public var fuelConsumptionCombinedWltpElectro: Double?
  public var fuelConsumptionCountryRoadWltp: Double?
  public var fuelConsumptionCountryRoadWltpElectro: Double?
  public var fuelConsumptionHighway: Double?
  public var fuelConsumptionHighwayWltp: Double?
  public var fuelConsumptionHighwayWltpElectro: Double?
  public var fuelConsumptionShortDistanceWltp: Double?
  public var fuelConsumptionShortDistanceWltpElectro: Double?
  public var fuelType: String?
  public var fuelTypePrice: Double?
  public var gears: Int?
  public var hasOverboost: Bool?
  public var hoisting: Double?
  public var id: String?
  public var image: String?
  public var images: [String]?
  public var info: String?
  public var isElectro: Bool?
  public var isHybrid: Bool?
  public var isHydrogen: Bool?
  public var isMarketingHybrid: Bool?
  public var isPluginHybrid: Bool?
  public var layout: String?
  public var manufacturerCode: String?
  public var maximalRangeElectricWltp: Double?
  public var maximumMileAge: Double?
  public var maximumMileageCityWltp: Double?
  public var maximumMileageWltp: Double?
  public var motorFuelCosts: Double?
  public var motorFuelCostsWltp: Double?
  public var motorFuelCostsWltpElectro: Double?
  public var motorGovernmentBafaBonusPrice: Double?
  public var motorHighMileage: Int?
  public var motorManufacturerBafaBonusPriceBrutto: Double?
  public var motorManufacturerBafaBonusPriceNetto: Double?
  public var motorPowerHp: Double?
  public var motorPowerKw: Double?
  public var motorSecondaryFuelCosts: Double?
  public var motorSecondaryFuelCostsWltp: Double?
  public var motorTorque: Double?
  public var motorVehicleNew2021Tax: Double?
  public var motorVehicleTax: Double?
  public var name: String?
  public var oemCode: String?
  public var particleFilter: String?
  public var power: Double?
  public var powerElectro: Double?
  public var powerElectroFront: Double?
  public var powerElectroFrontNGrinBoost: Double?
  public var powerElectroNGrinBoost: Double?
  public var powerElectroRear: Double?
  public var powerElectroRearNGrinBoost: Double?
  public var powerHp: Double?
  public var powerPsElectro: Double?
  public var powerPsElectroFront: Double?
  public var powerPsElectroFrontNGrinBoost: Double?
  public var powerPsElectroNGrinBoost: Double?
  public var powerPsElectroRear: Double?
  public var powerPsElectroRearNGrinBoost: Double?
  public var powerPsSystem: Double?
  public var powerSpeed: String?
  public var powerSpeedElectro: Double?
  public var powerSpeedSystem: Double?
  public var powerSystem: Double?
  public var price: Double?
  public var rangeElectricWltp: Double?
  public var roadNoise: Double?
  public var secondaryFuelType: String?
  public var secondaryFuelTypePrice: Double?
  public var size: Double?
  public var stationaryNoise: Double?
  public var tankCap: Double?
  public var topspeed: Double?
  public var torque: Double?
  public var torqueElectro: Double?
  public var torqueElectroFront: Double?
  public var torqueElectroFrontNGrinBoost: Double?
  public var torqueElectroNGrinBoost: Double?
  public var torqueElectroRear: Double?
  public var torqueElectroRearNGrinBoost: Double?
  public var torqueOverboost: Double?
  public var torqueSpeed: String?
  public var torqueSpeedElectro: Double?
  public var torqueSpeedOverboost: String?
  public var torqueSpeedSystem: Double?
  public var torqueSystem: Double?
  public var towingCapacityBraked: Double?
  public var towingCapacityUnbraked: Double?
  public var trackFront: String?
  public var trackRear: String?
  public var transmission: String?
  public var usesNefzMileage: Bool?
  public var usesOnlyWltpMileage: Bool?
  public var usesWltpElectroMileage: Bool?
  public var usesWltpMileage: Bool?
  public var valves: Int?
  public var weight: Double?
  public var weightCoc: Double?

  public init(accel: Double?  = nil, accel80To120kmh: Double?  = nil, accel80To120kmhNGrinBoost: Double?  = nil, accelNGrinBoost: Double?  = nil, accelSport: Double?  = nil, airDrag: Double?  = nil, automaticStartStop: String?  = nil, bafaActive: Bool?  = nil, bafaManufacturerPrice: Double?  = nil, bafaName: String?  = nil, battery: String?  = nil, batteryCapacity: Double?  = nil, batteryChargingTime100kw10Percent: Double?  = nil, batteryChargingTime10kw10Percent: Double?  = nil, batteryChargingTime11kw10Percent: Double?  = nil, batteryChargingTime11kw10To100Percent: Double?  = nil, batteryChargingTime11kwObc0To100Percent: Double?  = nil, batteryChargingTime11kwObc10Percent: Double?  = nil, batteryChargingTime230v0Percent: Double?  = nil, batteryChargingTime230v10Percent: Double?  = nil, batteryChargingTime350kw10Percent: Double?  = nil, batteryChargingTime4kw0Percent: Double?  = nil, batteryChargingTime4kw10Percent: Double?  = nil, batteryChargingTime50kw0Percent: Double?  = nil, batteryChargingTime50kw10Percent: Double?  = nil, batteryChargingTime70kw0Percent: Double?  = nil, batteryChargingTime7kwObc10Percent: Double?  = nil, batteryType: String?  = nil, bearingLoad: Double?  = nil, catalyst: String?  = nil, clearanceVap: String?  = nil, co2: Double?  = nil, co2Wltp: Double?  = nil, coldStartability: String?  = nil, cylnum: Int?  = nil, deliveryPeriod: Int?  = nil, description: String?  = nil, drive: String?  = nil, ecoCategory: String?  = nil, emissionCombinedEmptyBatteryWltp: Double?  = nil, emissionCombinedWltp: Double?  = nil, energyClass: String?  = nil, envkvClassEmptyBatteryWltp: String?  = nil, envkvClassWltp: String?  = nil, fuelConsumptionCity: Double?  = nil, fuelConsumptionCityWltp: Double?  = nil, fuelConsumptionCityWltpElectro: Double?  = nil, fuelConsumptionCombined: Double?  = nil, fuelConsumptionCombinedElectricWltp: Double?  = nil, fuelConsumptionCombinedElectro: Double?  = nil, fuelConsumptionCombinedEmptyBatteryWltp: Double?  = nil, fuelConsumptionCombinedHybridModeWltp: Double?  = nil, fuelConsumptionCombinedWltp: Double?  = nil, fuelConsumptionCombinedWltpElectro: Double?  = nil, fuelConsumptionCountryRoadWltp: Double?  = nil, fuelConsumptionCountryRoadWltpElectro: Double?  = nil, fuelConsumptionHighway: Double?  = nil, fuelConsumptionHighwayWltp: Double?  = nil, fuelConsumptionHighwayWltpElectro: Double?  = nil, fuelConsumptionShortDistanceWltp: Double?  = nil, fuelConsumptionShortDistanceWltpElectro: Double?  = nil, fuelType: String?  = nil, fuelTypePrice: Double?  = nil, gears: Int?  = nil, hasOverboost: Bool?  = nil, hoisting: Double?  = nil, id: String? = nil, image: String?  = nil, images: [String]?  = nil, info: String?  = nil, isElectro: Bool?  = nil, isHybrid: Bool?  = nil, isHydrogen: Bool?  = nil, isMarketingHybrid: Bool?  = nil, isPluginHybrid: Bool?  = nil, layout: String?  = nil, manufacturerCode: String?  = nil, maximalRangeElectricWltp: Double?  = nil, maximumMileAge: Double?  = nil, maximumMileageCityWltp: Double?  = nil, maximumMileageWltp: Double?  = nil, motorFuelCosts: Double?  = nil, motorFuelCostsWltp: Double?  = nil, motorFuelCostsWltpElectro: Double?  = nil, motorGovernmentBafaBonusPrice: Double?  = nil, motorHighMileage: Int?  = nil, motorManufacturerBafaBonusPriceBrutto: Double?  = nil, motorManufacturerBafaBonusPriceNetto: Double?  = nil, motorPowerHp: Double?  = nil, motorPowerKw: Double?  = nil, motorSecondaryFuelCosts: Double?  = nil, motorSecondaryFuelCostsWltp: Double?  = nil, motorTorque: Double?  = nil, motorVehicleNew2021Tax: Double?  = nil, motorVehicleTax: Double?  = nil, name: String?  = nil, oemCode: String?  = nil, particleFilter: String?  = nil, power: Double?  = nil, powerElectro: Double?  = nil, powerElectroFront: Double?  = nil, powerElectroFrontNGrinBoost: Double?  = nil, powerElectroNGrinBoost: Double?  = nil, powerElectroRear: Double?  = nil, powerElectroRearNGrinBoost: Double?  = nil, powerHp: Double?  = nil, powerPsElectro: Double?  = nil, powerPsElectroFront: Double?  = nil, powerPsElectroFrontNGrinBoost: Double?  = nil, powerPsElectroNGrinBoost: Double?  = nil, powerPsElectroRear: Double?  = nil, powerPsElectroRearNGrinBoost: Double?  = nil, powerPsSystem: Double?  = nil, powerSpeed: String?  = nil, powerSpeedElectro: Double?  = nil, powerSpeedSystem: Double?  = nil, powerSystem: Double?  = nil, price: Double?  = nil, rangeElectricWltp: Double?  = nil, roadNoise: Double?  = nil, secondaryFuelType: String?  = nil, secondaryFuelTypePrice: Double?  = nil, size: Double?  = nil, stationaryNoise: Double?  = nil, tankCap: Double?  = nil, topspeed: Double?  = nil, torque: Double?  = nil, torqueElectro: Double?  = nil, torqueElectroFront: Double?  = nil, torqueElectroFrontNGrinBoost: Double?  = nil, torqueElectroNGrinBoost: Double?  = nil, torqueElectroRear: Double?  = nil, torqueElectroRearNGrinBoost: Double?  = nil, torqueOverboost: Double?  = nil, torqueSpeed: String?  = nil, torqueSpeedElectro: Double?  = nil, torqueSpeedOverboost: String?  = nil, torqueSpeedSystem: Double?  = nil, torqueSystem: Double?  = nil, towingCapacityBraked: Double?  = nil, towingCapacityUnbraked: Double?  = nil, trackFront: String?  = nil, trackRear: String?  = nil, transmission: String?  = nil, usesNefzMileage: Bool?  = nil, usesOnlyWltpMileage: Bool?  = nil, usesWltpElectroMileage: Bool?  = nil, usesWltpMileage: Bool?  = nil, valves: Int?  = nil, weight: Double?  = nil, weightCoc: Double?  = nil) {
    self.accel = accel
    self.accel80To120kmh = accel80To120kmh
    self.accel80To120kmhNGrinBoost = accel80To120kmhNGrinBoost
    self.accelNGrinBoost = accelNGrinBoost
    self.accelSport = accelSport
    self.airDrag = airDrag
    self.automaticStartStop = automaticStartStop
    self.bafaActive = bafaActive
    self.bafaManufacturerPrice = bafaManufacturerPrice
    self.bafaName = bafaName
    self.battery = battery
    self.batteryCapacity = batteryCapacity
    self.batteryChargingTime100kw10Percent = batteryChargingTime100kw10Percent
    self.batteryChargingTime10kw10Percent = batteryChargingTime10kw10Percent
    self.batteryChargingTime11kw10Percent = batteryChargingTime11kw10Percent
    self.batteryChargingTime11kw10To100Percent = batteryChargingTime11kw10To100Percent
    self.batteryChargingTime11kwObc0To100Percent = batteryChargingTime11kwObc0To100Percent
    self.batteryChargingTime11kwObc10Percent = batteryChargingTime11kwObc10Percent
    self.batteryChargingTime230v0Percent = batteryChargingTime230v0Percent
    self.batteryChargingTime230v10Percent = batteryChargingTime230v10Percent
    self.batteryChargingTime350kw10Percent = batteryChargingTime350kw10Percent
    self.batteryChargingTime4kw0Percent = batteryChargingTime4kw0Percent
    self.batteryChargingTime4kw10Percent = batteryChargingTime4kw10Percent
    self.batteryChargingTime50kw0Percent = batteryChargingTime50kw0Percent
    self.batteryChargingTime50kw10Percent = batteryChargingTime50kw10Percent
    self.batteryChargingTime70kw0Percent = batteryChargingTime70kw0Percent
    self.batteryChargingTime7kwObc10Percent = batteryChargingTime7kwObc10Percent
    self.batteryType = batteryType
    self.bearingLoad = bearingLoad
    self.catalyst = catalyst
    self.clearanceVap = clearanceVap
    self.co2 = co2
    self.co2Wltp = co2Wltp
    self.coldStartability = coldStartability
    self.cylnum = cylnum
    self.deliveryPeriod = deliveryPeriod
    self.description = description
    self.drive = drive
    self.ecoCategory = ecoCategory
    self.emissionCombinedEmptyBatteryWltp = emissionCombinedEmptyBatteryWltp
    self.emissionCombinedWltp = emissionCombinedWltp
    self.energyClass = energyClass
    self.envkvClassEmptyBatteryWltp = envkvClassEmptyBatteryWltp
    self.envkvClassWltp = envkvClassWltp
    self.fuelConsumptionCity = fuelConsumptionCity
    self.fuelConsumptionCityWltp = fuelConsumptionCityWltp
    self.fuelConsumptionCityWltpElectro = fuelConsumptionCityWltpElectro
    self.fuelConsumptionCombined = fuelConsumptionCombined
    self.fuelConsumptionCombinedElectricWltp = fuelConsumptionCombinedElectricWltp
    self.fuelConsumptionCombinedElectro = fuelConsumptionCombinedElectro
    self.fuelConsumptionCombinedEmptyBatteryWltp = fuelConsumptionCombinedEmptyBatteryWltp
    self.fuelConsumptionCombinedHybridModeWltp = fuelConsumptionCombinedHybridModeWltp
    self.fuelConsumptionCombinedWltp = fuelConsumptionCombinedWltp
    self.fuelConsumptionCombinedWltpElectro = fuelConsumptionCombinedWltpElectro
    self.fuelConsumptionCountryRoadWltp = fuelConsumptionCountryRoadWltp
    self.fuelConsumptionCountryRoadWltpElectro = fuelConsumptionCountryRoadWltpElectro
    self.fuelConsumptionHighway = fuelConsumptionHighway
    self.fuelConsumptionHighwayWltp = fuelConsumptionHighwayWltp
    self.fuelConsumptionHighwayWltpElectro = fuelConsumptionHighwayWltpElectro
    self.fuelConsumptionShortDistanceWltp = fuelConsumptionShortDistanceWltp
    self.fuelConsumptionShortDistanceWltpElectro = fuelConsumptionShortDistanceWltpElectro
    self.fuelType = fuelType
    self.fuelTypePrice = fuelTypePrice
    self.gears = gears
    self.hasOverboost = hasOverboost
    self.hoisting = hoisting
    self.id = id
    self.image = image
    self.images = images
    self.info = info
    self.isElectro = isElectro
    self.isHybrid = isHybrid
    self.isHydrogen = isHydrogen
    self.isMarketingHybrid = isMarketingHybrid
    self.isPluginHybrid = isPluginHybrid
    self.layout = layout
    self.manufacturerCode = manufacturerCode
    self.maximalRangeElectricWltp = maximalRangeElectricWltp
    self.maximumMileAge = maximumMileAge
    self.maximumMileageCityWltp = maximumMileageCityWltp
    self.maximumMileageWltp = maximumMileageWltp
    self.motorFuelCosts = motorFuelCosts
    self.motorFuelCostsWltp = motorFuelCostsWltp
    self.motorFuelCostsWltpElectro = motorFuelCostsWltpElectro
    self.motorGovernmentBafaBonusPrice = motorGovernmentBafaBonusPrice
    self.motorHighMileage = motorHighMileage
    self.motorManufacturerBafaBonusPriceBrutto = motorManufacturerBafaBonusPriceBrutto
    self.motorManufacturerBafaBonusPriceNetto = motorManufacturerBafaBonusPriceNetto
    self.motorPowerHp = motorPowerHp
    self.motorPowerKw = motorPowerKw
    self.motorSecondaryFuelCosts = motorSecondaryFuelCosts
    self.motorSecondaryFuelCostsWltp = motorSecondaryFuelCostsWltp
    self.motorTorque = motorTorque
    self.motorVehicleNew2021Tax = motorVehicleNew2021Tax
    self.motorVehicleTax = motorVehicleTax
    self.name = name
    self.oemCode = oemCode
    self.particleFilter = particleFilter
    self.power = power
    self.powerElectro = powerElectro
    self.powerElectroFront = powerElectroFront
    self.powerElectroFrontNGrinBoost = powerElectroFrontNGrinBoost
    self.powerElectroNGrinBoost = powerElectroNGrinBoost
    self.powerElectroRear = powerElectroRear
    self.powerElectroRearNGrinBoost = powerElectroRearNGrinBoost
    self.powerHp = powerHp
    self.powerPsElectro = powerPsElectro
    self.powerPsElectroFront = powerPsElectroFront
    self.powerPsElectroFrontNGrinBoost = powerPsElectroFrontNGrinBoost
    self.powerPsElectroNGrinBoost = powerPsElectroNGrinBoost
    self.powerPsElectroRear = powerPsElectroRear
    self.powerPsElectroRearNGrinBoost = powerPsElectroRearNGrinBoost
    self.powerPsSystem = powerPsSystem
    self.powerSpeed = powerSpeed
    self.powerSpeedElectro = powerSpeedElectro
    self.powerSpeedSystem = powerSpeedSystem
    self.powerSystem = powerSystem
    self.price = price
    self.rangeElectricWltp = rangeElectricWltp
    self.roadNoise = roadNoise
    self.secondaryFuelType = secondaryFuelType
    self.secondaryFuelTypePrice = secondaryFuelTypePrice
    self.size = size
    self.stationaryNoise = stationaryNoise
    self.tankCap = tankCap
    self.topspeed = topspeed
    self.torque = torque
    self.torqueElectro = torqueElectro
    self.torqueElectroFront = torqueElectroFront
    self.torqueElectroFrontNGrinBoost = torqueElectroFrontNGrinBoost
    self.torqueElectroNGrinBoost = torqueElectroNGrinBoost
    self.torqueElectroRear = torqueElectroRear
    self.torqueElectroRearNGrinBoost = torqueElectroRearNGrinBoost
    self.torqueOverboost = torqueOverboost
    self.torqueSpeed = torqueSpeed
    self.torqueSpeedElectro = torqueSpeedElectro
    self.torqueSpeedOverboost = torqueSpeedOverboost
    self.torqueSpeedSystem = torqueSpeedSystem
    self.torqueSystem = torqueSystem
    self.towingCapacityBraked = towingCapacityBraked
    self.towingCapacityUnbraked = towingCapacityUnbraked
    self.trackFront = trackFront
    self.trackRear = trackRear
    self.transmission = transmission
    self.usesNefzMileage = usesNefzMileage
    self.usesOnlyWltpMileage = usesOnlyWltpMileage
    self.usesWltpElectroMileage = usesWltpElectroMileage
    self.usesWltpMileage = usesWltpMileage
    self.valves = valves
    self.weight = weight
    self.weightCoc = weightCoc
  }


  public func isEqual(to object: Any?) -> Bool {
    guard let object = object as? MasterDataTaxonomyMotorizationInfo else { return false }
    guard self.accel == object.accel else { return false }
    guard self.accel80To120kmh == object.accel80To120kmh else { return false }
    guard self.accel80To120kmhNGrinBoost == object.accel80To120kmhNGrinBoost else { return false }
    guard self.accelNGrinBoost == object.accelNGrinBoost else { return false }
    guard self.accelSport == object.accelSport else { return false }
    guard self.airDrag == object.airDrag else { return false }
    guard self.automaticStartStop == object.automaticStartStop else { return false }
    guard self.bafaActive == object.bafaActive else { return false }
    guard self.bafaManufacturerPrice == object.bafaManufacturerPrice else { return false }
    guard self.bafaName == object.bafaName else { return false }
    guard self.battery == object.battery else { return false }
    guard self.batteryCapacity == object.batteryCapacity else { return false }
    guard self.batteryChargingTime100kw10Percent == object.batteryChargingTime100kw10Percent else { return false }
    guard self.batteryChargingTime10kw10Percent == object.batteryChargingTime10kw10Percent else { return false }
    guard self.batteryChargingTime11kw10Percent == object.batteryChargingTime11kw10Percent else { return false }
    guard self.batteryChargingTime11kw10To100Percent == object.batteryChargingTime11kw10To100Percent else { return false }
    guard self.batteryChargingTime11kwObc0To100Percent == object.batteryChargingTime11kwObc0To100Percent else { return false }
    guard self.batteryChargingTime11kwObc10Percent == object.batteryChargingTime11kwObc10Percent else { return false }
    guard self.batteryChargingTime230v0Percent == object.batteryChargingTime230v0Percent else { return false }
    guard self.batteryChargingTime230v10Percent == object.batteryChargingTime230v10Percent else { return false }
    guard self.batteryChargingTime350kw10Percent == object.batteryChargingTime350kw10Percent else { return false }
    guard self.batteryChargingTime4kw0Percent == object.batteryChargingTime4kw0Percent else { return false }
    guard self.batteryChargingTime4kw10Percent == object.batteryChargingTime4kw10Percent else { return false }
    guard self.batteryChargingTime50kw0Percent == object.batteryChargingTime50kw0Percent else { return false }
    guard self.batteryChargingTime50kw10Percent == object.batteryChargingTime50kw10Percent else { return false }
    guard self.batteryChargingTime70kw0Percent == object.batteryChargingTime70kw0Percent else { return false }
    guard self.batteryChargingTime7kwObc10Percent == object.batteryChargingTime7kwObc10Percent else { return false }
    guard self.batteryType == object.batteryType else { return false }
    guard self.bearingLoad == object.bearingLoad else { return false }
    guard self.catalyst == object.catalyst else { return false }
    guard self.clearanceVap == object.clearanceVap else { return false }
    guard self.co2 == object.co2 else { return false }
    guard self.co2Wltp == object.co2Wltp else { return false }
    guard self.coldStartability == object.coldStartability else { return false }
    guard self.cylnum == object.cylnum else { return false }
    guard self.deliveryPeriod == object.deliveryPeriod else { return false }
    guard self.description == object.description else { return false }
    guard self.drive == object.drive else { return false }
    guard self.ecoCategory == object.ecoCategory else { return false }
    guard self.emissionCombinedEmptyBatteryWltp == object.emissionCombinedEmptyBatteryWltp else { return false }
    guard self.emissionCombinedWltp == object.emissionCombinedWltp else { return false }
    guard self.energyClass == object.energyClass else { return false }
    guard self.envkvClassEmptyBatteryWltp == object.envkvClassEmptyBatteryWltp else { return false }
    guard self.envkvClassWltp == object.envkvClassWltp else { return false }
    guard self.fuelConsumptionCity == object.fuelConsumptionCity else { return false }
    guard self.fuelConsumptionCityWltp == object.fuelConsumptionCityWltp else { return false }
    guard self.fuelConsumptionCityWltpElectro == object.fuelConsumptionCityWltpElectro else { return false }
    guard self.fuelConsumptionCombined == object.fuelConsumptionCombined else { return false }
    guard self.fuelConsumptionCombinedElectricWltp == object.fuelConsumptionCombinedElectricWltp else { return false }
    guard self.fuelConsumptionCombinedElectro == object.fuelConsumptionCombinedElectro else { return false }
    guard self.fuelConsumptionCombinedEmptyBatteryWltp == object.fuelConsumptionCombinedEmptyBatteryWltp else { return false }
    guard self.fuelConsumptionCombinedHybridModeWltp == object.fuelConsumptionCombinedHybridModeWltp else { return false }
    guard self.fuelConsumptionCombinedWltp == object.fuelConsumptionCombinedWltp else { return false }
    guard self.fuelConsumptionCombinedWltpElectro == object.fuelConsumptionCombinedWltpElectro else { return false }
    guard self.fuelConsumptionCountryRoadWltp == object.fuelConsumptionCountryRoadWltp else { return false }
    guard self.fuelConsumptionCountryRoadWltpElectro == object.fuelConsumptionCountryRoadWltpElectro else { return false }
    guard self.fuelConsumptionHighway == object.fuelConsumptionHighway else { return false }
    guard self.fuelConsumptionHighwayWltp == object.fuelConsumptionHighwayWltp else { return false }
    guard self.fuelConsumptionHighwayWltpElectro == object.fuelConsumptionHighwayWltpElectro else { return false }
    guard self.fuelConsumptionShortDistanceWltp == object.fuelConsumptionShortDistanceWltp else { return false }
    guard self.fuelConsumptionShortDistanceWltpElectro == object.fuelConsumptionShortDistanceWltpElectro else { return false }
    guard self.fuelType == object.fuelType else { return false }
    guard self.fuelTypePrice == object.fuelTypePrice else { return false }
    guard self.gears == object.gears else { return false }
    guard self.hasOverboost == object.hasOverboost else { return false }
    guard self.hoisting == object.hoisting else { return false }
    guard self.id == object.id else { return false }
    guard self.image == object.image else { return false }
    guard self.images == object.images else { return false }
    guard self.info == object.info else { return false }
    guard self.isElectro == object.isElectro else { return false }
    guard self.isHybrid == object.isHybrid else { return false }
    guard self.isHydrogen == object.isHydrogen else { return false }
    guard self.isMarketingHybrid == object.isMarketingHybrid else { return false }
    guard self.isPluginHybrid == object.isPluginHybrid else { return false }
    guard self.layout == object.layout else { return false }
    guard self.manufacturerCode == object.manufacturerCode else { return false }
    guard self.maximalRangeElectricWltp == object.maximalRangeElectricWltp else { return false }
    guard self.maximumMileAge == object.maximumMileAge else { return false }
    guard self.maximumMileageCityWltp == object.maximumMileageCityWltp else { return false }
    guard self.maximumMileageWltp == object.maximumMileageWltp else { return false }
    guard self.motorFuelCosts == object.motorFuelCosts else { return false }
    guard self.motorFuelCostsWltp == object.motorFuelCostsWltp else { return false }
    guard self.motorFuelCostsWltpElectro == object.motorFuelCostsWltpElectro else { return false }
    guard self.motorGovernmentBafaBonusPrice == object.motorGovernmentBafaBonusPrice else { return false }
    guard self.motorHighMileage == object.motorHighMileage else { return false }
    guard self.motorManufacturerBafaBonusPriceBrutto == object.motorManufacturerBafaBonusPriceBrutto else { return false }
    guard self.motorManufacturerBafaBonusPriceNetto == object.motorManufacturerBafaBonusPriceNetto else { return false }
    guard self.motorPowerHp == object.motorPowerHp else { return false }
    guard self.motorPowerKw == object.motorPowerKw else { return false }
    guard self.motorSecondaryFuelCosts == object.motorSecondaryFuelCosts else { return false }
    guard self.motorSecondaryFuelCostsWltp == object.motorSecondaryFuelCostsWltp else { return false }
    guard self.motorTorque == object.motorTorque else { return false }
    guard self.motorVehicleNew2021Tax == object.motorVehicleNew2021Tax else { return false }
    guard self.motorVehicleTax == object.motorVehicleTax else { return false }
    guard self.name == object.name else { return false }
    guard self.oemCode == object.oemCode else { return false }
    guard self.particleFilter == object.particleFilter else { return false }
    guard self.power == object.power else { return false }
    guard self.powerElectro == object.powerElectro else { return false }
    guard self.powerElectroFront == object.powerElectroFront else { return false }
    guard self.powerElectroFrontNGrinBoost == object.powerElectroFrontNGrinBoost else { return false }
    guard self.powerElectroNGrinBoost == object.powerElectroNGrinBoost else { return false }
    guard self.powerElectroRear == object.powerElectroRear else { return false }
    guard self.powerElectroRearNGrinBoost == object.powerElectroRearNGrinBoost else { return false }
    guard self.powerHp == object.powerHp else { return false }
    guard self.powerPsElectro == object.powerPsElectro else { return false }
    guard self.powerPsElectroFront == object.powerPsElectroFront else { return false }
    guard self.powerPsElectroFrontNGrinBoost == object.powerPsElectroFrontNGrinBoost else { return false }
    guard self.powerPsElectroNGrinBoost == object.powerPsElectroNGrinBoost else { return false }
    guard self.powerPsElectroRear == object.powerPsElectroRear else { return false }
    guard self.powerPsElectroRearNGrinBoost == object.powerPsElectroRearNGrinBoost else { return false }
    guard self.powerPsSystem == object.powerPsSystem else { return false }
    guard self.powerSpeed == object.powerSpeed else { return false }
    guard self.powerSpeedElectro == object.powerSpeedElectro else { return false }
    guard self.powerSpeedSystem == object.powerSpeedSystem else { return false }
    guard self.powerSystem == object.powerSystem else { return false }
    guard self.price == object.price else { return false }
    guard self.rangeElectricWltp == object.rangeElectricWltp else { return false }
    guard self.roadNoise == object.roadNoise else { return false }
    guard self.secondaryFuelType == object.secondaryFuelType else { return false }
    guard self.secondaryFuelTypePrice == object.secondaryFuelTypePrice else { return false }
    guard self.size == object.size else { return false }
    guard self.stationaryNoise == object.stationaryNoise else { return false }
    guard self.tankCap == object.tankCap else { return false }
    guard self.topspeed == object.topspeed else { return false }
    guard self.torque == object.torque else { return false }
    guard self.torqueElectro == object.torqueElectro else { return false }
    guard self.torqueElectroFront == object.torqueElectroFront else { return false }
    guard self.torqueElectroFrontNGrinBoost == object.torqueElectroFrontNGrinBoost else { return false }
    guard self.torqueElectroNGrinBoost == object.torqueElectroNGrinBoost else { return false }
    guard self.torqueElectroRear == object.torqueElectroRear else { return false }
    guard self.torqueElectroRearNGrinBoost == object.torqueElectroRearNGrinBoost else { return false }
    guard self.torqueOverboost == object.torqueOverboost else { return false }
    guard self.torqueSpeed == object.torqueSpeed else { return false }
    guard self.torqueSpeedElectro == object.torqueSpeedElectro else { return false }
    guard self.torqueSpeedOverboost == object.torqueSpeedOverboost else { return false }
    guard self.torqueSpeedSystem == object.torqueSpeedSystem else { return false }
    guard self.torqueSystem == object.torqueSystem else { return false }
    guard self.towingCapacityBraked == object.towingCapacityBraked else { return false }
    guard self.towingCapacityUnbraked == object.towingCapacityUnbraked else { return false }
    guard self.trackFront == object.trackFront else { return false }
    guard self.trackRear == object.trackRear else { return false }
    guard self.transmission == object.transmission else { return false }
    guard self.usesNefzMileage == object.usesNefzMileage else { return false }
    guard self.usesOnlyWltpMileage == object.usesOnlyWltpMileage else { return false }
    guard self.usesWltpElectroMileage == object.usesWltpElectroMileage else { return false }
    guard self.usesWltpMileage == object.usesWltpMileage else { return false }
    guard self.valves == object.valves else { return false }
    guard self.weight == object.weight else { return false }
    guard self.weightCoc == object.weightCoc else { return false }
    return true
  }

  public static func == (lhs: MasterDataTaxonomyMotorizationInfo, rhs: MasterDataTaxonomyMotorizationInfo) -> Bool {
    return lhs.isEqual(to: rhs)
  }
}
