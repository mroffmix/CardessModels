//
// Generated for Cardess.SELL
// https://github.com/yonaskolb/SwagGen
//  
//  Generated by Ilya Mikhailov
//  Copyright Â© 2022 MCon Germany GmbH. All rights reserved.

import Foundation



public class ModelActivity: Codable, Equatable {
  public var assignedTo: ModelUser?
  public var assignedToId: String?
  public var box: ModelDeliveryBox?
  public var boxId: String?
  public var callAttemptsCount: Int?
  public var comment: String?
  public var createdOn: Date?
  public var endDate: Date?
  public var externalId: String?
  public var id: String?
  public var lead: ModelLead?
  public var leadId: String?
  public var modifiedOn: Date?
  public var personalizedMessage: String?
  public var place: String?
  public var resources: [ModelResource]?
  public var startDate: Date?
  public var state: EnumsActivityStatus?
  public var testDriveLog: ModelTestDriveLog?
  public var testDriveLogId: String?
  public var type: EnumsActivityType?
  public var vehicleId: String?

  public init(assignedTo: ModelUser?  = nil, assignedToId: String? = nil, box: ModelDeliveryBox?  = nil, boxId: String? = nil, callAttemptsCount: Int?  = nil, comment: String?  = nil, createdOn: Date? = nil, endDate: Date? = nil, externalId: String?  = nil, id: String? = nil, lead: ModelLead?  = nil, leadId: String? = nil, modifiedOn: Date? = nil, personalizedMessage: String?  = nil, place: String?  = nil, resources: [ModelResource]?  = nil, startDate: Date? = nil, state: EnumsActivityStatus?  = nil, testDriveLog: ModelTestDriveLog?  = nil, testDriveLogId: String? = nil, type: EnumsActivityType?  = nil, vehicleId: String? = nil) {
    self.assignedTo = assignedTo
    self.assignedToId = assignedToId
    self.box = box
    self.boxId = boxId
    self.callAttemptsCount = callAttemptsCount
    self.comment = comment
    self.createdOn = createdOn
    self.endDate = endDate
    self.externalId = externalId
    self.id = id
    self.lead = lead
    self.leadId = leadId
    self.modifiedOn = modifiedOn
    self.personalizedMessage = personalizedMessage
    self.place = place
    self.resources = resources
    self.startDate = startDate
    self.state = state
    self.testDriveLog = testDriveLog
    self.testDriveLogId = testDriveLogId
    self.type = type
    self.vehicleId = vehicleId
  }


  public func isEqual(to object: Any?) -> Bool {
    guard let object = object as? ModelActivity else { return false }
    guard self.assignedTo == object.assignedTo else { return false }
    guard self.assignedToId == object.assignedToId else { return false }
    guard self.box == object.box else { return false }
    guard self.boxId == object.boxId else { return false }
    guard self.callAttemptsCount == object.callAttemptsCount else { return false }
    guard self.comment == object.comment else { return false }
    guard self.createdOn == object.createdOn else { return false }
    guard self.endDate == object.endDate else { return false }
    guard self.externalId == object.externalId else { return false }
    guard self.id == object.id else { return false }
    guard self.lead == object.lead else { return false }
    guard self.leadId == object.leadId else { return false }
    guard self.modifiedOn == object.modifiedOn else { return false }
    guard self.personalizedMessage == object.personalizedMessage else { return false }
    guard self.place == object.place else { return false }
    guard self.resources == object.resources else { return false }
    guard self.startDate == object.startDate else { return false }
    guard self.state == object.state else { return false }
    guard self.testDriveLog == object.testDriveLog else { return false }
    guard self.testDriveLogId == object.testDriveLogId else { return false }
    guard self.type == object.type else { return false }
    guard self.vehicleId == object.vehicleId else { return false }
    return true
  }

  public static func == (lhs: ModelActivity, rhs: ModelActivity) -> Bool {
    return lhs.isEqual(to: rhs)
  }
}
