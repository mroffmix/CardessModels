//
// Generated for Cardess.SELL
// https://github.com/yonaskolb/SwagGen
//  
//  Generated by Ilya Mikhailov
//  Copyright Â© 2022 MCon Germany GmbH. All rights reserved.

import Foundation



public class CommunicationTradeInValuation: Codable, Equatable {
  public var equipmentOriginalPriceSum: CommunicationTradeInMonetaryValue?
  public var equipmentPriceSum: CommunicationTradeInMonetaryValue?
  public var equipmentValuationPrice: CommunicationTradeInMonetaryValue?
  public var forecasts: [CommunicationTradeInForecastItem]?
  public var lastValuationDataMonth: Int?
  public var lastValuationDataYear: Int?
  public var level: Int?
  public var margin: CommunicationTradeInMonetaryValue?
  public var marginGross: CommunicationTradeInMonetaryValue?
  public var modifiedPurchasePrice: CommunicationTradeInModifiedValuation?
  public var originalPrice: CommunicationTradeInMonetaryValue?
  public var originalPriceGross: CommunicationTradeInMonetaryValue?
  public var purchasePrice: CommunicationTradeInMonetaryValue?
  public var purchasePriceGross: CommunicationTradeInMonetaryValue?
  public var salesForecasts: [CommunicationTradeInForecastItem]?
  public var salesPrice: CommunicationTradeInMonetaryValue?
  public var salesPriceGross: CommunicationTradeInMonetaryValue?
  public var source: CommunicationTradeInValuationSource?
  public var vat: Double?

  public init(equipmentOriginalPriceSum: CommunicationTradeInMonetaryValue?  = nil, equipmentPriceSum: CommunicationTradeInMonetaryValue?  = nil, equipmentValuationPrice: CommunicationTradeInMonetaryValue?  = nil, forecasts: [CommunicationTradeInForecastItem]?  = nil, lastValuationDataMonth: Int?  = nil, lastValuationDataYear: Int?  = nil, level: Int?  = nil, margin: CommunicationTradeInMonetaryValue?  = nil, marginGross: CommunicationTradeInMonetaryValue?  = nil, modifiedPurchasePrice: CommunicationTradeInModifiedValuation?  = nil, originalPrice: CommunicationTradeInMonetaryValue?  = nil, originalPriceGross: CommunicationTradeInMonetaryValue?  = nil, purchasePrice: CommunicationTradeInMonetaryValue?  = nil, purchasePriceGross: CommunicationTradeInMonetaryValue?  = nil, salesForecasts: [CommunicationTradeInForecastItem]?  = nil, salesPrice: CommunicationTradeInMonetaryValue?  = nil, salesPriceGross: CommunicationTradeInMonetaryValue?  = nil, source: CommunicationTradeInValuationSource?  = nil, vat: Double?  = nil) {
    self.equipmentOriginalPriceSum = equipmentOriginalPriceSum
    self.equipmentPriceSum = equipmentPriceSum
    self.equipmentValuationPrice = equipmentValuationPrice
    self.forecasts = forecasts
    self.lastValuationDataMonth = lastValuationDataMonth
    self.lastValuationDataYear = lastValuationDataYear
    self.level = level
    self.margin = margin
    self.marginGross = marginGross
    self.modifiedPurchasePrice = modifiedPurchasePrice
    self.originalPrice = originalPrice
    self.originalPriceGross = originalPriceGross
    self.purchasePrice = purchasePrice
    self.purchasePriceGross = purchasePriceGross
    self.salesForecasts = salesForecasts
    self.salesPrice = salesPrice
    self.salesPriceGross = salesPriceGross
    self.source = source
    self.vat = vat
  }


  public func isEqual(to object: Any?) -> Bool {
    guard let object = object as? CommunicationTradeInValuation else { return false }
    guard self.equipmentOriginalPriceSum == object.equipmentOriginalPriceSum else { return false }
    guard self.equipmentPriceSum == object.equipmentPriceSum else { return false }
    guard self.equipmentValuationPrice == object.equipmentValuationPrice else { return false }
    guard self.forecasts == object.forecasts else { return false }
    guard self.lastValuationDataMonth == object.lastValuationDataMonth else { return false }
    guard self.lastValuationDataYear == object.lastValuationDataYear else { return false }
    guard self.level == object.level else { return false }
    guard self.margin == object.margin else { return false }
    guard self.marginGross == object.marginGross else { return false }
    guard self.modifiedPurchasePrice == object.modifiedPurchasePrice else { return false }
    guard self.originalPrice == object.originalPrice else { return false }
    guard self.originalPriceGross == object.originalPriceGross else { return false }
    guard self.purchasePrice == object.purchasePrice else { return false }
    guard self.purchasePriceGross == object.purchasePriceGross else { return false }
    guard self.salesForecasts == object.salesForecasts else { return false }
    guard self.salesPrice == object.salesPrice else { return false }
    guard self.salesPriceGross == object.salesPriceGross else { return false }
    guard self.source == object.source else { return false }
    guard self.vat == object.vat else { return false }
    return true
  }

  public static func == (lhs: CommunicationTradeInValuation, rhs: CommunicationTradeInValuation) -> Bool {
    return lhs.isEqual(to: rhs)
  }
}
