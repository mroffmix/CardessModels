//
// Generated for Cardess.SELL
// https://github.com/yonaskolb/SwagGen
//  
//  Generated by Ilya Mikhailov
//  Copyright Â© 2022 MCon Germany GmbH. All rights reserved.

import Foundation



public class FullLeadVehicleData: Codable, Equatable {
  public var aboCalculation: VehicleDataAboPackageInfo?
  public var aboRate: Double?
  public var accessories: [LeadVehicleAccessoryInfo]?
  public var applicationType: CommunicationModelsEnumsApplicationType?
  public var balloon: Double?
  public var calculations: [LeadVehicleCalculationInfo]?
  public var colourId: String?
  public var comment: String?
  public var createdOn: Date?
  public var creditPeriod: Double?
  public var dealerDiscountRuleId: String?
  public var dealerLocationId: String?
  public var documents: [LeadVehicleDocumentInfo]?
  public var expectedAnnualMileage: Double?
  public var fixedExpectedAnnualMileage: Double?
  public var id: String?
  public var isBusinessCustomer: Bool?
  public var isInsurancePackageIncluded: Bool?
  public var isServicePackageIncluded: Bool?
  public var lead: LeadInfo?
  public var leadId: String?
  public var leadVehicleType: CommunicationModelsEnumsLeadVehicleType?
  public var leasingCalculation: VehicleDataLeasingCalculation?
  public var matrixRuleId: String?
  public var modifiedOn: Date?
  public var onlineProcessId: String?
  public var payment: CommunicationModelsEnumsTypeOfPayment?
  public var prepayedAmount: Double?
  public var price: Double?
  public var reason: CommunicationModelsEnumsRejectionReason?
  public var rimId: String?
  public var rrpTotal: Double?
  public var upholsteryId: String?
  public var usedInTestDrive: Bool?
  public var vehicle: VehicleDataVehicleInfo?
  public var vehicleBookingId: String?
  public var vehicleId: String?

  public init(aboCalculation: VehicleDataAboPackageInfo?  = nil, aboRate: Double?  = nil, accessories: [LeadVehicleAccessoryInfo]?  = nil, applicationType: CommunicationModelsEnumsApplicationType?  = nil, balloon: Double?  = nil, calculations: [LeadVehicleCalculationInfo]?  = nil, colourId: String? = nil, comment: String?  = nil, createdOn: Date? = nil, creditPeriod: Double?  = nil, dealerDiscountRuleId: String? = nil, dealerLocationId: String?  = nil, documents: [LeadVehicleDocumentInfo]?  = nil, expectedAnnualMileage: Double?  = nil, fixedExpectedAnnualMileage: Double?  = nil, id: String? = nil, isBusinessCustomer: Bool?  = nil, isInsurancePackageIncluded: Bool?  = nil, isServicePackageIncluded: Bool?  = nil, lead: LeadInfo?  = nil, leadId: String? = nil, leadVehicleType: CommunicationModelsEnumsLeadVehicleType?  = nil, leasingCalculation: VehicleDataLeasingCalculation?  = nil, matrixRuleId: String? = nil, modifiedOn: Date? = nil, onlineProcessId: String? = nil, payment: CommunicationModelsEnumsTypeOfPayment?  = nil, prepayedAmount: Double?  = nil, price: Double?  = nil, reason: CommunicationModelsEnumsRejectionReason?  = nil, rimId: String? = nil, rrpTotal: Double?  = nil, upholsteryId: String? = nil, usedInTestDrive: Bool?  = nil, vehicle: VehicleDataVehicleInfo?  = nil, vehicleBookingId: String? = nil, vehicleId: String? = nil) {
    self.aboCalculation = aboCalculation
    self.aboRate = aboRate
    self.accessories = accessories
    self.applicationType = applicationType
    self.balloon = balloon
    self.calculations = calculations
    self.colourId = colourId
    self.comment = comment
    self.createdOn = createdOn
    self.creditPeriod = creditPeriod
    self.dealerDiscountRuleId = dealerDiscountRuleId
    self.dealerLocationId = dealerLocationId
    self.documents = documents
    self.expectedAnnualMileage = expectedAnnualMileage
    self.fixedExpectedAnnualMileage = fixedExpectedAnnualMileage
    self.id = id
    self.isBusinessCustomer = isBusinessCustomer
    self.isInsurancePackageIncluded = isInsurancePackageIncluded
    self.isServicePackageIncluded = isServicePackageIncluded
    self.lead = lead
    self.leadId = leadId
    self.leadVehicleType = leadVehicleType
    self.leasingCalculation = leasingCalculation
    self.matrixRuleId = matrixRuleId
    self.modifiedOn = modifiedOn
    self.onlineProcessId = onlineProcessId
    self.payment = payment
    self.prepayedAmount = prepayedAmount
    self.price = price
    self.reason = reason
    self.rimId = rimId
    self.rrpTotal = rrpTotal
    self.upholsteryId = upholsteryId
    self.usedInTestDrive = usedInTestDrive
    self.vehicle = vehicle
    self.vehicleBookingId = vehicleBookingId
    self.vehicleId = vehicleId
  }


  public func isEqual(to object: Any?) -> Bool {
    guard let object = object as? FullLeadVehicleData else { return false }
    guard self.aboCalculation == object.aboCalculation else { return false }
    guard self.aboRate == object.aboRate else { return false }
    guard self.accessories == object.accessories else { return false }
    guard self.applicationType == object.applicationType else { return false }
    guard self.balloon == object.balloon else { return false }
    guard self.calculations == object.calculations else { return false }
    guard self.colourId == object.colourId else { return false }
    guard self.comment == object.comment else { return false }
    guard self.createdOn == object.createdOn else { return false }
    guard self.creditPeriod == object.creditPeriod else { return false }
    guard self.dealerDiscountRuleId == object.dealerDiscountRuleId else { return false }
    guard self.dealerLocationId == object.dealerLocationId else { return false }
    guard self.documents == object.documents else { return false }
    guard self.expectedAnnualMileage == object.expectedAnnualMileage else { return false }
    guard self.fixedExpectedAnnualMileage == object.fixedExpectedAnnualMileage else { return false }
    guard self.id == object.id else { return false }
    guard self.isBusinessCustomer == object.isBusinessCustomer else { return false }
    guard self.isInsurancePackageIncluded == object.isInsurancePackageIncluded else { return false }
    guard self.isServicePackageIncluded == object.isServicePackageIncluded else { return false }
    guard self.lead == object.lead else { return false }
    guard self.leadId == object.leadId else { return false }
    guard self.leadVehicleType == object.leadVehicleType else { return false }
    guard self.leasingCalculation == object.leasingCalculation else { return false }
    guard self.matrixRuleId == object.matrixRuleId else { return false }
    guard self.modifiedOn == object.modifiedOn else { return false }
    guard self.onlineProcessId == object.onlineProcessId else { return false }
    guard self.payment == object.payment else { return false }
    guard self.prepayedAmount == object.prepayedAmount else { return false }
    guard self.price == object.price else { return false }
    guard self.reason == object.reason else { return false }
    guard self.rimId == object.rimId else { return false }
    guard self.rrpTotal == object.rrpTotal else { return false }
    guard self.upholsteryId == object.upholsteryId else { return false }
    guard self.usedInTestDrive == object.usedInTestDrive else { return false }
    guard self.vehicle == object.vehicle else { return false }
    guard self.vehicleBookingId == object.vehicleBookingId else { return false }
    guard self.vehicleId == object.vehicleId else { return false }
    return true
  }

  public static func == (lhs: FullLeadVehicleData, rhs: FullLeadVehicleData) -> Bool {
    return lhs.isEqual(to: rhs)
  }
}
