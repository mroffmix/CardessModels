//
// Generated for Cardess.SELL
// https://github.com/yonaskolb/SwagGen
//  
//  Generated by Ilya Mikhailov
//  Copyright Â© 2022 MCon Germany GmbH. All rights reserved.

import Foundation



public class CommunicationVehicleTaxonomyValues<T:Codable>: Codable, Equatable {
   public var bodies:[CommunicationTaxonomyValue<T>]?
   public var carLines:[CommunicationTaxonomyValue<T>]?
   public var categories:[CommunicationTaxonomyValue<T>]?
   public var co2emissionMax:[CommunicationTaxonomyValue<T>]?
   public var co2emissionMin:[CommunicationTaxonomyValue<T>]?
   public var engineDesignes:[CommunicationTaxonomyValue<T>]?
   public var engineVolumes:[CommunicationTaxonomyValue<T>]?
   public var fuelTypes:[CommunicationTaxonomyValue<T>]?
   public var makes:[CommunicationTaxonomyValue<T>]?
   public var models:[CommunicationTaxonomyValue<T>]?
   public var noofCylinders:[CommunicationTaxonomyValue<T>]?
   public var transmissions:[CommunicationTaxonomyValue<T>]?
   public var turbo:[CommunicationTaxonomyValue<T>]?

  public init(bodies: [CommunicationTaxonomyValue<T>]? = nil, carLines: [CommunicationTaxonomyValue<T>]? = nil, categories: [CommunicationTaxonomyValue<T>]? = nil, co2emissionMax: [CommunicationTaxonomyValue<T>]? = nil, co2emissionMin: [CommunicationTaxonomyValue<T>]? = nil, engineDesignes: [CommunicationTaxonomyValue<T>]? = nil, engineVolumes: [CommunicationTaxonomyValue<T>]? = nil, fuelTypes: [CommunicationTaxonomyValue<T>]? = nil, makes: [CommunicationTaxonomyValue<T>]? = nil, models: [CommunicationTaxonomyValue<T>]? = nil, noofCylinders: [CommunicationTaxonomyValue<T>]? = nil, transmissions: [CommunicationTaxonomyValue<T>]? = nil, turbo: [CommunicationTaxonomyValue<T>]? = nil) {
    self.bodies = bodies
    self.carLines = carLines
    self.categories = categories
    self.co2emissionMax = co2emissionMax
    self.co2emissionMin = co2emissionMin
    self.engineDesignes = engineDesignes
    self.engineVolumes = engineVolumes
    self.fuelTypes = fuelTypes
    self.makes = makes
    self.models = models
    self.noofCylinders = noofCylinders
    self.transmissions = transmissions
    self.turbo = turbo
  }


  public func isEqual(to object: Any?) -> Bool {
    guard let object = object as? CommunicationVehicleTaxonomyValues else { return false }
    guard self.bodies == object.bodies else { return false }
    guard self.carLines == object.carLines else { return false }
    guard self.categories == object.categories else { return false }
    guard self.co2emissionMax == object.co2emissionMax else { return false }
    guard self.co2emissionMin == object.co2emissionMin else { return false }
    guard self.engineDesignes == object.engineDesignes else { return false }
    guard self.engineVolumes == object.engineVolumes else { return false }
    guard self.fuelTypes == object.fuelTypes else { return false }
    guard self.makes == object.makes else { return false }
    guard self.models == object.models else { return false }
    guard self.noofCylinders == object.noofCylinders else { return false }
    guard self.transmissions == object.transmissions else { return false }
    guard self.turbo == object.turbo else { return false }
    return true
  }

  public static func == (lhs: CommunicationVehicleTaxonomyValues, rhs: CommunicationVehicleTaxonomyValues) -> Bool {
    return lhs.isEqual(to: rhs)
  }
}
