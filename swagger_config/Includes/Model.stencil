{% if description %}
/** {{ description }} */
{% endif %}
{% if enum %}
{% include "Includes/Enum.stencil" enum %}
{% elif aliasType %}
public typealias {{ type }} = {{ aliasType }}
{% elif additionalPropertiesType and allProperties.count == 0 %}
public typealias {{ type }} = [String: {{ additionalPropertiesType }}]
{% elif discriminatorType %}
public enum {{ type }}: Codable, Equatable {
    {% for subType in discriminatorType.subTypes %}
    case {{ subType.name}}({{ subType.type }})
    {% endfor %}
    {% if options.enumUndecodableCase %}
    case undecodable
    {% endif %}

}
{% else %}
public {{ options.modelType }} {{ type }}: {% if parent %}{{ parent.type }}{% else %}{% if options.modelProtocol %}{{ options.modelProtocol }}{% else %}Codable, Equatable{% endif %}{% endif %} {
    {% for enum in enums %}
    {% if not enum.isGlobal %}
    {% filter indent:4 %}{% include "Includes/Enum.stencil" enum %}{% endfilter %}
    {% endif %}
    {% endfor %}
    {% for property in properties %}
    {% if property.description %}
    /** {{ property.description }} */
    {% endif %}
    public {% if options.mutableModels %}var{% else %}let{% endif %} {{ property.name }}: {{ property.optionalType }}
    {% endfor %}
    {% if additionalPropertiesType %}
    public {% if options.mutableModels %}var{% else %}let{% endif %} additionalProperties: [String: {{ additionalPropertiesType }}] = [:]
    {% endif %}
    {% for schema in schemas %}
    {% filter indent:4 %}{% include "Includes/Model.stencil" schema %}{% endfilter %}
    {% endfor %}

    public {% if parent %}{% if properties.count == 0 %}override {% endif %}{% endif %}init({% for property in allProperties %}{{ property.name }}: {{ property.optionalType }}{% ifnot property.required %} = nil{% endif %}{% ifnot forloop.last %}, {% endif %}{% endfor %}) {
        {% for property in properties %}
        self.{{ property.name }} = {{ property.name }}
        {% endfor %}
        {% if parent %}
        super.init({% for property in parent.allProperties %}{{ property.name }}: {{ property.name }}{% ifnot forloop.last %}, {% endif %}{% endfor %})
        {% endif %}
    }

    {% if additionalPropertiesType %}

    public subscript(key: String) -> {{ additionalPropertiesType }}? {
        get {
            return additionalProperties[key]
        }
        set {
            additionalProperties[key] = newValue
        }
    }
    {% endif %}

    {% if options.modelType == "class" %}
    {% if parent %}override {% endif %}public func isEqual(to object: Any?) -> Bool {
      {% if properties.count > 0 or additionalPropertiesType %}
      guard let object = object as? {{ type }} else { return false }
      {% else %}
      guard object is {{ type }} else { return false }
      {% endif %}
      {% for property in properties %}
      {% if property.type == "[String: Any]" %}
      guard NSDictionary(dictionary: self.{{ property.name}} {% if property.optional %}?? [:]{% endif %}).isEqual(to: object.{{ property.name }}{% if property.optional %} ?? [:]{% endif %}) else { return false }
      {% else if property.type == "T?" %}
      // !!! guard self.{{ property.name }} == object.{{ property.name }} else { return false }
      {% else if property.type == "T?" %}
      // !!! guard self.{{ property.name }} == object.{{ property.name }} else { return false }
      {% else %}
      // !!! property.type
      guard self.{{ property.name }} == object.{{ property.name }} else { return false }
      {% endif %}
      {% endfor %}
      {% if additionalPropertiesType %}
      guard NSDictionary(dictionary: self.additionalProperties).isEqual(to: object.additionalProperties) else { return false }
      {% endif %}
      {% if parent %}
      return super.isEqual(to: object)
      {% else %}
      return true
      {% endif %}
    }
    {% if not parent %}

    public static func == (lhs: {{ type }}, rhs: {{ type }}) -> Bool {
        return lhs.isEqual(to: rhs)
    }
    {% endif %}
    {% endif %}
}
{% endif %}
